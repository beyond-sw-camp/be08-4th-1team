pipeline {
    agent {
        kubernetes {
            yaml '''
            apiVersion: v1
            kind: Pod
            metadata:
              name: jenkins-agent
            spec:
              containers:
              - name: gradle
                image: gradle:7.6.2-jdk17
                command:
                - cat
                tty: true
              - name: docker
                image: docker:latest
                command:
                - cat
                tty: true
                volumeMounts:
                - mountPath: "/var/run/docker.sock"
                  name: docker-socket
              - name: kubectl
                image: bitnami/kubectl:latest
                command:
                - cat
                tty: true
              volumes:
              - name: docker-socket
                hostPath:
                  path: "/var/run/docker.sock"
            '''
        }
    }

    environment {
        DOCKER_CREDENTIALS_ID = 'dockerhub_access'
        DOCKER_IMAGE_NAME = 'jjjwww8802/auth-service'
        DOCKERHUB_URL = 'https://index.docker.io/v1/'
        GITHUB_URL = 'git@github.com:beyond-sw-camp/be08-4th-DQ-OMOS.git'
        GITHUB_CREDENTIALS_ID = 'omos_access_ssh'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: "${GITHUB_CREDENTIALS_ID}", url: "${GITHUB_URL}"
            }
        }

        stage('Setup Environment Variables') {
            steps {
                withCredentials([
                    string(credentialsId: 'DB_URL', variable: 'DB_URL'),
                    string(credentialsId: 'DB_USERNAME', variable: 'DB_USERNAME'),
                    string(credentialsId: 'DB_PASSWORD', variable: 'DB_PASSWORD'),
                    string(credentialsId: 'NAVER_CLIENT_ID', variable: 'NAVER_CLIENT_ID'),
                    string(credentialsId: 'NAVER_CLIENT_SECRET', variable: 'NAVER_CLIENT_SECRET'),
                    string(credentialsId: 'GOOGLE_CLIENT_ID', variable: 'GOOGLE_CLIENT_ID'),
                    string(credentialsId: 'GOOGLE_CLIENT_SECRET', variable: 'GOOGLE_CLIENT_SECRET'),
                    string(credentialsId: 'JWT_SECRET', variable: 'JWT_SECRET')
                ]) {
                    sh 'printenv'
                }
            }
        }

        stage('Gradle Build') {
            steps {
                dir('Backend/auth-service') {
                    container('gradle') {
                        sh './gradlew clean bootJar'  // 빌드 실행
                    }
                }
            }
        }

        stage('Docker Image Build & Push') {
            steps {
                dir('Backend/auth-service') {
                    container('docker') {
                        script {
                            def dockerImageTag = "${env.BUILD_NUMBER}"
                            sh 'docker logout'
                            withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                                sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                            }
                            sh "docker build --no-cache -t ${DOCKER_IMAGE_NAME}:${dockerImageTag} ."
                            sh "docker push ${DOCKER_IMAGE_NAME}:${dockerImageTag}"
                            sh 'docker logout'
                        }
                    }
                }
            }
        }

        stage('Kubernetes Deploy') {
            steps {
                container('kubectl') {
                    script {
                        def dockerImageTag = "${env.BUILD_NUMBER}"
                        sh "kubectl set image deploy auth-deploy auth=${DOCKER_IMAGE_NAME}:${dockerImageTag} -n default --record"
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Build and Deployment Successful"
        }
        failure {
            echo "Build or Deployment Failed"
        }
        always {
            cleanWs()  // 작업 공간 정리 (Workspace Cleanup 플러그인 필요)
        }
    }
}
