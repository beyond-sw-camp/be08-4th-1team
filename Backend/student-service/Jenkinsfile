pipeline {
    agent {
        kubernetes {
            yaml '''
            apiVersion: v1
            kind: Pod
            metadata:
              name: jenkins-agent
            spec:
              containers:
              - name: gradle
                image: gradle:latest
                command:
                - cat
                tty: true
              - name: docker
                image: docker:latest
                command:
                - cat
                tty: true
                volumeMounts:
                - mountPath: "/var/run/docker.sock"
                  name: docker-socket
              - name: kubectl
                image: bitnami/kubectl:latest
                command:
                - cat
                tty: true
              volumes:
              - name: docker-socket
                hostPath:
                  path: "/var/run/docker.sock"
            '''
        }
    }

    environment {
        DOCKER_IMAGE_NAME = 'jjjwww8802/student-service'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: 'omos_access_ssh', url: 'git@github.com:beyond-sw-camp/be08-4th-DQ-OMOS.git'
            }
        }

        stage('Gradle Build') {
            steps {
                dir('Backend/student-service') {
                    container('gradle') {
                        sh 'ls'  // 경로 확인을 위한 명령
                        sh 'chmod +x ./gradlew'  // gradlew 파일에 실행 권한 부여
                        sh './gradlew --version'  // Gradle 버전 확인
                        sh './gradlew clean build'  // Gradle 빌드 실행
                    }
                }
            }
        }

        stage('Docker Image Build & Push') {
            steps {
                dir('Backend/student-service') {
                    container('docker') {
                        script {
                            def dockerImageTag = "${env.BUILD_NUMBER}"

                            echo "DockerImageTag : ${dockerImageTag}"

                            sh 'docker logout'
                            withCredentials([usernamePassword(credentialsId: 'dockerhub_access', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                                sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                            }
                            withEnv(["DOCKER_IMAGE_TAG=${dockerImageTag}"]) {
                                // Dockerfile을 기반으로 빌드
                                sh 'docker build --no-cache -t $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG .'
                                sh 'docker image inspect $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG'
                                sh 'docker push $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG'
                            }
                            sh 'docker logout'
                        }
                    }
                }
            }
        }

        stage('Deployment') {
            steps {
                container('kubectl') {
                    script {
                        def dockerImageTag = "${env.BUILD_NUMBER}"

                        echo "DockerImageTag : ${dockerImageTag}"

                        withEnv(["DOCKER_IMAGE_TAG=${dockerImageTag}"]) {
                            sh 'kubectl set image deploy student-deploy student=$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG -n default'
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Build and Deployment Successful"
        }
        failure {
            echo "Build or Deployment Failed"
        }
    }
}
