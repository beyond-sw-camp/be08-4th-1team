pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID = 'dockerhub_access'  // dockerhub 자격증명 ID
        DOCKER_IMAGE_NAME = 'jjjwww8802/student-service'
        DOCKERHUB_URL = 'https://index.docker.io/v1/'
        GITHUB_URL = 'git@github.com:beyond-sw-camp/be08-4th-DQ-OMOS.git'
        GITHUB_CREDENTIALS_ID = 'omos_access_ssh'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: "${GITHUB_CREDENTIALS_ID}", url: "${GITHUB_URL}"
            }
        }

        stage('build'){
            steps {
                script{
                    echo "${pwd()}"
                    echo "Add Permission"
                        sh 'chmod +x ./Backend/student-service/gradlew'
                        echo "Gradle Build"

                        sh '''
                        cd ./Backend/student-service
                        ./gradlew bootjar
                        '''
                }
            }
        }

        stage('Docker Image Build & Push') {
            steps {
                dir('Backend/student-service') {
                    script {
                        def dockerImageTag = "${env.BUILD_NUMBER}"

                        echo "DockerImageTag : ${dockerImageTag}"

                        sh 'docker logout'
                        withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                            sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                        }

                        // Docker 이미지 빌드 및 푸시
                        sh "docker build --no-cache -t ${DOCKER_IMAGE_NAME}:${dockerImageTag} ."
                        sh "docker push ${DOCKER_IMAGE_NAME}:${dockerImageTag}"

                        sh 'docker logout'
                    }
                }
            }
        }

        stage('Kubernetes Deploy') {
            steps {
                script {
                    def dockerImageTag = "${env.BUILD_NUMBER}"

                    echo "Deploying DockerImageTag : ${dockerImageTag}"

                    sh "kubectl set image deploy student-deploy student=${DOCKER_IMAGE_NAME}:${dockerImageTag} -n default --record"
                }
            }
        }
    }

    post {
        success {
            echo "Build and Deployment Successful"
        }
        failure {
            echo "Build or Deployment Failed"
        }
        always {
            cleanWs()  // 작업 공간 정리
        }
    }
}
